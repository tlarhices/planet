//Cg
//Cg profile arbvp1 arbfp1

void vshader( in float4 vtx_position : POSITION,
              in float3 vtx_normal : NORMAL,
              in float4 vtx_color : COLOR,
              in float2 vtx_texcoord0 : TEXCOORD0,
              in uniform float4x4 mat_modelproj,
              in uniform float4x4 mat_modelview,
              in uniform float4 k_lightvec,

              out float4 l_blend,
              out float l_brightness,
              out float2 l_texcoord0 : TEXCOORD0,
              out float4 l_position : POSITION )
{
    l_position = mul( mat_modelproj, vtx_position );

    // texcoords
    l_texcoord0 = vtx_texcoord0;

    // texture blending
    l_blend.x = vtx_color.r;
    l_blend.y = vtx_color.g;
    l_blend.z = vtx_color.b;
    l_blend.w = vtx_color.a;
    
    // lighting
    float3 N = normalize( vtx_normal );
    float3 L = normalize( k_lightvec.xyz );
    l_brightness = max( dot( N, L ), 0.25 );
}

void fshader( in float4 l_position : POSITION,
              in float2 l_texcoord0 : TEXCOORD0,
              in float4 l_blend,
              in float l_brightness,

              in uniform sampler2D tex_0 : TEXUNIT0,
              in uniform sampler2D tex_1 : TEXUNIT1,
              in uniform sampler2D tex_2 : TEXUNIT2,

              out float4 o_color : COLOR )
{
    float4 sable = tex2D( tex_0, l_texcoord0 );
    float4 herbe = tex2D( tex_1, l_texcoord0 );
    float4 neige = tex2D( tex_2, l_texcoord0 );

    // texture blending
    o_color = sable;
    o_color = o_color * ( 1.0 - l_blend.x ) + l_blend.x * herbe;
    o_color = o_color * ( 1.0 - l_blend.y ) + l_blend.y * neige;

    // lighting
    o_color = o_color * l_brightness;
}

